module Homework where

import Text.Regex

-- Стоянов Дмитрий А3200


-- Задание 1:
-- Назовем “производной” элемента числового списка разность между следующим в списке и данным элементом.
-- Производной последнего элемента будем считать 0. Например, список производных элементов списка [3,1,2,5,7,6]
-- будет список [-2,1,3,2,-1,0]. Написать функцию maxDeriv :: Real a => [a] -> Int,
-- которая в заданном списке числовых элементов находит индекс элемента с максимальной “производной”.
-- Например, в вышеприведенном списке таким индексом будет 2, поскольку элемент с этим индексом имеет максимальную производную - 3.

-- Проход по списку с запоминанием текущего индекса, лучшей производной и соответсвующего ей лучшего индекса.
-- Если список пустой - у него нет ни одной производной - ошибка аргумента
-- Если дошли до последнего элемента, проверяем что макисмальная производная не меньше 0
-- Иначе максимальная производная у последнего элемента и равна 0.
-- В случае одинаковых значений максимальной производной возвращается индекс первого такого элемента.
maxDeriv :: Real a => [a] -> a
maxDeriv a = maxDeriv' a 0 (-1) 0 where
  maxDeriv' [] i maxP bestI     =  error "Incorrect arg"
  maxDeriv' (s:[]) i maxP bestI =  if maxP >= 0 then bestI else i
  maxDeriv' (s:xs) i maxP bestI =  if (head xs - s) > maxP
      then maxDeriv' xs (i + 1) (head xs - s) i
      else maxDeriv' xs (i + 1) maxP bestI


-- Задание 2:
-- В заданной строке символов будем считать числом произвольную последовательность цифр,
-- слева и справа от которой не находится цифра.Написать функцию maxNumber :: String -> Integer,
-- выдающую числовое значение самого большого “числа” в строке.
-- Например, результатом вызова функции с аргументом "0xFF55 00012 -100 19" должно быть 100.
-- Если чисел в строке нет совсем, то это ошибка аргумента.

-- Разделяем строку по символам не цифр. Получаем лист строк, состоящий из чисел или пустых строк.
-- Убираем пустые строки, преобразуем лист строк в лист целых чисел и ищем максимум на таком листе.
-- Если лист пуст - выводим ошибку аргумента
maxNumber :: String -> Integer
maxNumber s =  maxL $ map read $ filter (not . null) $ splitRegex (mkRegex "[^0-9]") s  where
  maxL l = maximum (if null l then error "Incorrect arg" else l)



-- Тесты
main :: [Bool]
main =  [
-- Тесты для задания 1.
        maxDeriv [3, 1, 2, 5, 7, 6] == 2,
        maxDeriv [1] == 0,
        maxDeriv [-1, -10, 120, 30, 51] == 1,
        maxDeriv [1, 1, 1, -1, 0, 1, 1, -1, 1, 4, 1, 1, -1, 2] == 8,
        maxDeriv [-10, -1, 31, -24, -123122, 324234, 1] == 4,
--  Тесты для задания 2.
        maxNumber "0xFF55 00012 -100 19" == 100,
        maxNumber "-99 1x6twer2 wer ;;awdew3" == 99,
        maxNumber "1+2aas 123142x4214 wo 12 23*21" == 123142,
        maxNumber "123" == 123,
        maxNumber "qwerty12 -113y ;sa$^$@#@ b431EDW" == 431
        ]
